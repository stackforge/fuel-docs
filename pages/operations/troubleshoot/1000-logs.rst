

.. _logs-top-tshoot:

Logs and messages
-----------------

A number of logs are available
to help you understand and troubleshoot
what is going on in your environment.

.. _screen-messages-tshoot:

Screen messages
+++++++++++++++

Clicking on the icon in the upper right corner
of the Fuel UI displays a drop-down menu
of notifications posted as the environment was deployed.
If notifications have been posted
that you have not yet viewed,
this icon is an orange square with a number
that indicates the number of unread notifications.
If there are no unread notifications,
the icon looks as it does here:

.. image:: /_images/user_screen_shots/messages.png
   :width: 80%

These notifications tell you about the nodes that were deployed
and when nodes go on and offline.
Click on any notification
to get a summary configuration view of the node.

.. _view-logs-fuel:

Viewing Logs through Fuel
+++++++++++++++++++++++++

The Logs tab on the Fuel UI allows you to view
key logs for any node in the environment.
Use the drop-down list on the left to select
whether to view Fuel Master logs
or the logs of other servers in the environment.

When you choose the "Fuel Master" logs,
you get this display:

.. image:: /_images/user_screen_shots/master-logs.png
   :width: 80%

Select the log to view by setting the fields:

:Logs:    Choose between the Fuel Master or "Other servers".
          When you choose "Other servers", the display changes
          to provide a drop-down list of all nodes in the environment.

:Source:  Log you want to view.  See the lists below.

:Min Level:    By default, this shows "INFO" messages only.
               If you are running your environment in debug mode,
               you can use this field to filter out some of the messages.

When you have set all the fields, click on "SHOW" at the right
to display the requested log for the specified server.

Viewing Fuel Master logs
++++++++++++++++++++++++

The following logs can be chosen from the "Source" list
for the "Fuel Master" node:

:puppet:    Logs activity of the :ref:`puppet-term`
            configuration management system.

:anaconda:  Logs activities of the Anaconda installation agent
            used for provisioning.

:syslog:  Shows the **syslog** entries
          that will be sent to the **rsyslog** server
          (Fuel Master by default).



**Other install logs**

:storage:    Log entries for disk partitioning.

:kickstart-pre:   Shows activities before the :ref:`Cobbler<cobbler-term>`
                  kickstart mechanism runs.

:kickstart-post:  Shows activities after the Cobbler kickstart mechanism runs.


**Bootstrap logs**

:Web backend:  Logs each connection from the Master Node
               to the Internet.

:REST API:    :ref:`Nailgun<nailgun-term>` API activities.

:RPC consumer:    Logs messaging between :ref:`Nailgun<nailgun-term>`
                  and the :ref:`orchestration service<orchestration-service-term>`

:Astute:  Records the activity of the :ref:`astute-term` agents
          that implements the :ref:`nailgun-term` configuration tasks.

:Health Check:  Displays the results of the most recent run
                of the tests run from the "Health Check" tab.

Viewing logs for target nodes ("Other servers")
+++++++++++++++++++++++++++++++++++++++++++++++

When you choose "Other Servers",
the display includes an extra field
that you use to choose the node whose logs you want to view:

.. image:: /_images/user_screen_shots/other-nodes-logs.png
   :width: 80%

Many of the same logs shown for the Fuel Master node
are also shown for the target nodes.
The difference is in the nodes given for "Bootstrap logs",
plus the controller node includes a set of OpenStack logs
that shows logs for services that run on the Controller node.

The "Bootstrap logs" for "Other servers" are:

**Bootstrap logs**

:dmesg:  Standard Linux dmesg log that displays log messages
         from the most recent system startup.

:messages:  Logs all kernel messages for the node.

:mcollective:    Logs activities of Mcollective

:agent:    Logs activities of the
           :ref:`Nailgun<nailgun-term>` agent.

syslog
++++++

OpenStack uses the standard Linux **syslog**/**rsyslog** facilities
to manage logging in the environment.
Fuel puts the appropriate templates
into the */etc/rsyslog.d* directory
on each target node.

By default, Fuel sets up the Fuel Master node
to be the remote syslog server.
See :ref:`syslog-ug` for instructions about
how to configure the environment
to use a different server as the **rsyslog** server.
Note that Fuel configures all the files required for **rsyslog**
when you use the Fuel Master node as the remote server;
if you specify another server,
you must configure that server to handle messages
from the OpenStack environment.

/var/logs
+++++++++

Logs for each node are written to the node's */var/logs* directory
and can be viewed there.
Under this directory, you will find subdirectories
for the major services that run on that node
such as nova, cinder, glance, and heat.

On the Fuel Master node,
*/var/log/remote* is a symbolic link to the
*/var/log/docker-logs/remote* directory.

.. _atop-ops:

atop logs
+++++++++

Fuel installs and runs
`atop <http://www.atoptool.nl/>`_
on all deployed nodes in the environment.
The **atop** service uses
`screen <https://www.gnu.org/software/screen/manual/screen.html>`_
to display
detailed information
about resource usage on each node.
The data shows usage of the hardware resources
that are most important from a performance standpoint:
CPU, memory, disk, and network interfaces
and can be used to troubleshoot performance and scalability issues.

The implementation is:

* By default, **atop** takes a snapshot of system status
  every 20 seconds and stores this information in binary form.

* The binary data is stored locally on each node
  in the */var/log/atop* directory.

* Data is kept for seven days;
  a logrotate job deletes logs older than seven days.

* Data is stored locally on each target node;
  it is not aggregated for the whole environment.

* The data consumes no more than 2GB of disk space on each node
  with the default configuration settings.

* The **atop** service can be disabled from the Linux shell.
  A Puppet run
  (either done manually or when patching OpenStack)
  re-enables **atop**.

* The Diagnostic Logs snapshot includes
  the *atop* data for the current day only.

To view the **atop** data,
run the `atop(1) <http://manpages.ubuntu.com/manpages/utopic/man1/atop.1.html>`_
command on the shell of the node you are analyzing.

::

   atop -r /var/log/atop/<filename>


Use **t** and **T** to navigate through the state snapshots.

You can also search the **atop** data.
For example, the following command reports on
all **sh** processes in the **atop** binary file
that ran between 10:00 and 12:00 (searching the *atop_current* binary file).
For each process, the **PPRG** flag causes it to report when it started,
when it ended, and the exit code provided:

.. code-block :: sh

    atop -PPRG -r /var/log/atop/atop_current -b "10:00" -e "12:00" | grep 'sh'

See the atop(1) man page for a description of
the **atop** options and commands.

Each target node has a configuration file
that controls the behavior of **atop** on that node.
On Ubuntu nodes, this is the */etc/default/atop* file;
on CentOS nodes, this is the */etc/sysconfig/atop* file.
The contents of the file are:

.. code-block :: sh


   INTERVAL=20
   LOGPATH="/var/log/atop"
   OUTFILE="$LOGPATH/daily.log"`

Modifying the value of the `INTERVAL` parameter
or the **logrotate** settings affects the size of the logs maintained.
For the most efficient log size,
use a larger interval setting and a smaller rotate setting.
To modify the rotate setting,
edit the */etc/logrotate.d/atop* file
and make both of the following modifications;
the value of `X` should be the same in both cases:

- Modify the value of the **rotate X** setting.
- Modify the value of the **mtime +X** argument
  to the **lastaction** setting.


Enabling debug logging for OpenStack services
+++++++++++++++++++++++++++++++++++++++++++++

Most OpenStack services use the same configuration options to control log level
and logging method. If you need to troubleshoot a specific service, locate its
config file under */etc* (e.g. */etc/nova/nova.conf*) and revert the values of
**debug** and **use_syslog** flags like this::

  debug=True
  use_syslog=False

Disabling syslog will protect the Fuel master node from being overloaded from a
flood of debug messages sent from that node to the rsyslog server. Do not
forget to revert both flags back to original values when done with
troubleshooting.
