
.. _ceph-s3-api:

S3 API in Ceph RADOS Gateway
----------------------------

Introduction
++++++++++++

Ceph RADOS Gateway offers accessing the same objects and containers using many different APIs. The two most important are: OpenStack Object Storage API v1 (aka Swift API) and Amazon S3 (Simple Storage Service). Beside these, radosgw supports several internal interfaces dedicated for logging, replication, and administration. Covering them is not the purpose of this document.

Getting started
+++++++++++++++

Assumption has been made that you posses a working Ceph cluster and the radosgw is able to access the cluster. In case of using cephx security system, which is the default scenario, both radosgw and cluster must authenticate to each other. Please note this is not related to any user-layer authentication mechanism used in radosgw like Keystone, TempURL, or TempAuth. If radosgw is deployed with Fuel, cephx should work out of the box. In case of manual deployment, `official documentation <http://ceph.com/docs/master/radosgw/config/#create-a-user-and-keyring>`_ will be helpful.

To enable or just verify whether S3 has been properly configured, the configuration file used by radosgw (usually :file:`/etc/ceph/ceph.conf`) should be inspected. Please take a look at radosgw's section (usually `client.radosgw.gateway`) and consider following options:

    * *rgw_enable_apis* - if present, it must contain at least "s3"

User authentication
+++++++++++++++++++

The component providing S3 API implementation inside radosgw actually supports two methods of user authentication: Keystone-based and RADOS-based (internal). Each of them may be separately enabled or disabled with an appropriate configuration option. The first one takes precedence over the second. That is, if both methods are enabled and Keystone authentication fails for any reason (wrong credentials, connectivity problems etc.), the RADOS-based will be treated as fallback.

Keystone-based
^^^^^^^^^^^^^^

**Configuration**

Keystone authentication for S3 is not enabled by default, even if using Fuel. Please take a look at appropriate section (usually `client.radosgw.gateway`) in radosgw's configuration file and consider following options:

.. list-table::
   :widths: 42 15 70 20
   :header-rows: 1

   * - Option name
     - Default value in rgw
     - Comment
     - Present in Fuel-deployed configuration 
   * - rgw_s3_auth_use_keystone
     - false
     - must be present and set to true
     - no
   * - rgw_keystone_url
     - empty
     - 	must be present and set to point admin interface of Keystone (usually port 35357, *some versions of Fuel wrongly set the port to 5000*).
     - yes
   * - rgw_keystone_admin_token
     - empty
     - must be present and match the admin token set in Keystone configuration
     - yes
   * - rgw_keystone_accepted_roles
     - Member, admin
     - should correspond the Keystone schema. Fuel setting seems to be OK
     - yes

**User Management**

In case of using Keystone-based authentication, user management is fully delegated to Keystone. You may use :command:`keystone` CLI command to do that. Please be aware that the EC2/S3 `<AccessKeyId>:<secret>` credentials pair do not map well into Keystone (there is no a direct way to specify a tenant), so special compatibility layer has been introduced. Practically, it means you need to tell Keystone about the mapping parameters manually. For example:

::

 keystone ec2-credentials-create --tenant-id=68a23e70b5854263ab64f2ddc16c2a38  --user-id=2ccdd07ae153484296d308eab10c85dd

 WARNING: Bypassing authentication using a token & endpoint (authentication credentials are being ignored).

 +-----------+----------------------------------+
 |  Property |              Value               |
 +-----------+----------------------------------+
 |   access  | 3862b51ecc6a43a78ffca23a05e7c0ad |
 |   secret  | a0b4cb375d5a409893b05e36812fb811 |
 | tenant_id | 68a23e70b5854263ab64f2ddc16c2a38 |
 |  trust_id |                                  |
 |  user_id  | 2ccdd07ae153484296d308eab10c85dd |
 +-----------+----------------------------------+

``access`` and ``secret`` are the parameters needed to authenticate a client to S3 API.

**Performance Impact**

Please be aware that Keystone's PKI tokens are not available together with S3 API. Moreover, radosgw doesn't cache  Keystone responses while using S3 API. This could lead to authorization service overload.	

RADOS-based (internal)
^^^^^^^^^^^^^^^^^^^^^^

**Configuration**

The RADOS-based authentication mechanism should work out of the box. It is enabled by default in radosgw and Fuel does not change this setting. However, in case of necessity to disable it, the `rgw_s3_auth_use_rados` may be set to `false`.

**User Management**

User management could be performed with command line utility :command:`radosgw-admin` provided with Ceph. For example,  to create a new user the following command should be executed:

::

 radosgw-admin user create --uid=ant --display-name="aterekhin"
 { "user_id": "ant",
  "display_name": "aterekhin",
  "email": "",
  "suspended": 0,
  "max_buckets": 1000,
  "auid": 0,
  "subusers": [],
  "keys": [
        { "user": "ant",
          "access_key": "9TEP7FTSYTZF2HZD284A",
          "secret_key": "8uNAjUZ+u0CcpbJsQBgpoVgHkm+PU8e3cXvyMclY"}],
  "swift_keys": [],
  "caps": [],
  "op_mask": "read, write, delete",
  "default_placement": "",
  "placement_tags": [],
  "bucket_quota": { "enabled": false,
      "max_size_kb": -1,
      "max_objects": -1},
  "user_quota": { "enabled": false,
      "max_size_kb": -1,
      "max_objects": -1},
  "temp_url_keys": []}

``access_key`` and ``secret_key`` are the parameters needed to authenticate a client to S3 API.

**Verification**

To check whether everything works fine a low-level S3 API client might very useful, especially if it can provide assistance in the matter of generation authentication signature. S3 authentication model requires that the client provides a key identifier (`AccessKeyId`) and `HMAC-based <http://en.wikipedia.org/wiki/Hash-based_message_authentication_code>`_ authentication signature, which is calculated against user key (`secret`) and some HTTP headers present in the request. The well-known solution is `s3curl <https://github.com/rtdp/s3curl>`_ application. However, unpatched versions contain severe bugs (see `LP1446704 <https://bugs.launchpad.net/fuel/+bug/1446704>`_). We fixed them already and sent a pull request to its author. However, until it is not merged, we may recommend trying `this version <https://github.com/rzarzynski/s3curl>`_ of s3curl.





