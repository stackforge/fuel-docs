.. _0020-api:

API
---

If you want to change or add some tasks right on
the Fuel Master node, just add the *tasks.yaml* file
and respective manifests in the folder for the release that you are interested in.
Then run the following command:

::
    fuel rel --sync-deployment-tasks --dir /etc/puppet

Also you may want to overwrite the deployment tasks for any specific
release/cluster using the following commands:

::
    fuel rel --rel <id> --deployment-tasks --download
    fuel rel --rel <id> --deployment-tasks --upload

    fuel env --env <id> --deployment-tasks --download
    fuel env --env <id> --deployment-tasks --upload

After this is done you will be able to run a customized graph of tasks:

The most basic command:

::
    fuel node --node 1,2,3 --tasks upload_repos netconfig

The developer will need to specify nodes that should be used in deployment and
task IDs. The order in which these are provided does not matter.
It will be computed from the dependencies specified in the database.

..note:: The node will not be executed if a task is mapped to Controller role,
but the node where you want to apply the task does not have this role.

Skipping of tasks
-----------------

Use the *skip* parameter to skip tasks.

Example:

::
    fuel node --node 1,2,3 --skip netconfig hiera

The list of tasks specified with the *skip* parameter will be skipped during
graph traversal in nailgun.

If there are task dependencies, you may want to make use of a "smarter" traversal:

Specify the start and end nodes in the graph:

::
    fuel node --node 1,2,3 --end netconfig

This will deploy everything up to the netconfig task, including netconfig.
This means that this will deploy all tasks that are a part of *pre_deployment*: keys generation, rsync
manifests, sync time, upload repos, including such tasks as hiera setup, globals computation and maybe some other
basic preparatory tasks.

::
    fuel node --node 1,2,3 --start netconfig

Start from netconfig (including netconfig itself), deploy all the tasks that are
 a part of *post_deployment*.

For example, if you want to execute only the netconfig successors:

::
    fuel node --node 1,2,3 --start netconfig --skip netconfig

And the user will be able to use start and end at the same time:

::
    fuel node --node 1,2,3 --start netconfig --end upload_cirros

Nailgun will build a path that includes only thw necessary tasks to join these two
points.

Graph representation
--------------------

Beginning with Fuel 6.1, in addition to commands above, there also exists a helper that allows
to download deployment graph in DOT `DOT <http://www.graphviz.org/doc/info/lang.html>`_
format and later render it.

Command for downloading graph prints its output to standard output.
To download a full graph for environment with id 1 and print it on the screen,
use the following command:

::

   fuel graph --env 1 --download

To download graph and save it to the *graph.gv* file:

::

   fuel graph --env 1 --download > graph.gv

It is also possible to specify the same options as for deployment command.
Point out start and end nodes in graph:

::

   fuel graph --env 1 --download --start netconfig > graph.gv

   fuel graph --env 1 --download --end netconfig > graph.gv

Or specify both:

::

  fuel graph --env 1 --download --start netconfig --end upload_cirros > graph.gv


Skipping tasks is also supported (skipped tasks will be grayed out in the graph
visualization):

::

   fuel graph --env 1 --download --skip netconfig hiera  > graph.gv

If user wants to completly remove skipped tasks from graph visualization, ``--remove`` parameter
can be used:

::

  fuel graph --env 1 --download --start netconfig --end upload_cirros --remove skipped > graph.gv


If user wants to see only parents of a particular tasks:

::

   fuel graph --env 1 --download --parents-for hiera  > graph.gv


Downloaded graph in DOT format can be rendered. It requires additional packages
to be installed:

* `Graphviz <http://www.graphviz.org/>`_ using **apt-get install graphviz** or **yum install graphviz** commands
* `pydot-ng <https://pypi.python.org/pypi/pydot-ng/>`_ using **pip install pydot-ng** command
  or `pygraphivz <https://pypi.python.org/pypi/pygraphviz>`_ using **pip install pygraphivz** command

After installing the packages, you can render the graph:

::

    fuel graph --render graph.gv

The command above will take the contents of **graph.gv** file, render it as a PNG image
and save as "graph.gv.png".

Render command supports reading graph representation from the standard input:

::

  fuel graph --render -

It is possible to combine commands for downloading and rendering graph
together to avoid creating intermediate file:

::

   fuel graph --env 1 --download | fuel graph --render -
