.. _0020-api:

API
---

If you want to change or add some tasks right on
the Fuel Master node, just add the ``tasks.yaml`` file
and respective manifests in the folder for the release
that you are interested in.
Then run the following command:

::

       fuel rel --sync-deployment-tasks --dir /etc/puppet

If you want to overwrite the deployment tasks for any specific
release/environment, use the following commands:

::

       fuel rel --rel <id> --deployment-tasks --download
       fuel rel --rel <id> --deployment-tasks --upload

       fuel env --env <id> --deployment-tasks --download
       fuel env --env <id> --deployment-tasks --upload


After this is done, you will be able to run a customized graph
of tasks.
To do that, use a basic command:

::

      fuel node --node <1>,<2>,<3> --tasks upload_repos netconfig

The developer will need to specify the nodes that should be used
in deployment and task IDs. The order in which these are provided
does not matter.
It will be computed from the dependencies specified in the database.

.. note:: The node will not be executed, if a task is mapped to
          Controller role, but the node where you want to apply
          the task does not have this role.

Skipping tasks
--------------

Use the ``skip`` parameter to skip tasks:

::

       fuel node --node <1>,<2>,<3> --skip netconfig hiera

The list of tasks specified with the ``skip`` parameter will
be skipped during graph traversal in Nailgun.

If there are task dependencies, you may want to make use of
a "smarter" traversal -- you will need to specify the start
and end nodes in the graph:

::

       fuel node --node <1>,<2>,<3> --end netconfig


This will deploy everything up to the netconfig task, including it.
This means, that this command will deploy all tasks
that are a part of ``pre_deployment``: keys generation, rsync
manifests, sync time, upload repos, including such tasks as hiera setup,
globals computation and maybe some other basic preparatory tasks:

::

      fuel node --node <1>,<2>,<3> --start netconfig


Start from ``netconfig`` task (including it), deploy all the tasks that
are a part of ``post_deployment``.

For example, if you want to execute only the netconfig successors,
use:

::

       fuel node --node <1>,<2>,<3> --start netconfig --skip netconfig


You will also be able to use ``start`` and ``end`` at the same time:

::

       fuel node --node <1>,<2>,<3> --start netconfig --end upload_cirros


Nailgun will build a path that includes only necessary tasks to join
these two points.


.. _render-graph:

Graph representation
--------------------

Beginning with Fuel 6.1, in addition to the commands above,
there also exists a helper that allows
to download deployment graph in DOT `DOT <http://www.graphviz.org/doc/info/lang.html>`_
format and later render it.

Commands for downloading graphs
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Use the following commands to download graphs:

* To download a full graph for environment with ID 1
  and print it on the screen, use the command below.
  Note, that it will print its output to stdout.

  ::

      fuel graph --env <1> --download

* To download the graph and save it to the ``graph.gv`` file:

  ::

      fuel graph --env <1> --download > graph.gv


* It is also possible to specify the same options as for the deployment
  command. Point out the start and end nodes in the graph:

  ::

     fuel graph --env <1> --download --start netconfig > graph.gv

     fuel graph --env <1> --download --end netconfig > graph.gv

* You can also specify both:

  ::

     fuel graph --env <1> --download --start netconfig --end upload_cirros > graph.gv


* To skip the tasks (they will be grayed out in the graph
  visualization), use:

  ::

      fuel graph --env <1> --download --skip netconfig hiera  > graph.gv

* To completely remove the skipped tasks from graph visualization,
  use the ``--remove`` parameter:

  ::

     fuel graph --env <1> --download --start netconfig --end upload_cirros --remove skipped > graph.gv


* To see only the parents of a particular tasks:

  ::

      fuel graph --env 1 --download --parents-for hiera  > graph.gv

Commands for rendering graphs
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

* Downloaded graph in DOT format can be rendered.
  It requires additional packages to be installed:

  * `Graphviz <http://www.graphviz.org/>`_
    using ``apt-get install graphviz`` or ``yum install graphviz`` commands.

  * `pydot-ng <https://pypi.python.org/pypi/pydot-ng/>`_
    using ``pip install pydot-ng`` command  or
    `pygraphivz <https://pypi.python.org/pypi/pygraphviz>`_
    using ``pip install pygraphivz`` command.

* After installing the packages, you can render the graph using the
  command below. It will take the contents of ``graph.gv`` file,
  render it as a PNG image and save as ``graph.gv.png``.

  ::

      fuel graph --render graph.gv


* To read graph representation from the st,
  use:

  ::

     fuel graph --render -

* To avoid creating an intermediate file when downloading
  and rendering graph, you can combine both commands:

  ::

      fuel graph --env <1> --download | fuel graph --render -
